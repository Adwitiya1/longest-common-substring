def LCS(X, Y, m, n):
 
    maxLength = 0        
    endingIndex = m        
 
    # `lookup[i][j]` stores the length of LCS of substring `X[0…i-1]` and `Y[0…j-1]`
    lookup = [[0 for x in range(n + 1)] for y in range(m + 1)]
 
    # fill the lookup table in a bottom-up manner
    for i in range(1, m + 1):
        for j in range(1, n + 1):
 
            # if X and Y match
            if X[i - 1] == Y[j - 1]:
                lookup[i][j] = lookup[i - 1][j - 1] + 1
 
                # update the maximum length and ending index
                if lookup[i][j] > maxLength:
                    maxLength = lookup[i][j]
                    endingIndex = i
 
    # return longest common substring having length `maxLength`
    return X[endingIndex - maxLength: endingIndex]
 
 
if __name__ == '__main__':
 
    X = [3, 6, 7, 4, 2, 7, 9, 1, 0, 3, 5, 6]
    Y = [1, 5, 6, 9, 7, 4, 2, 7, 9, 9, 2, 1]
 
    m = len(X)
    n = len(Y)
    print("The common substring is", LCS(X, Y, m, n))
